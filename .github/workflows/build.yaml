name: Build Transcriber

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-latest]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.8

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip wheel
          pip install pyinstaller torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
          pip install numpy==1.24
          pip install git+https://github.com/openai/whisper.git

      - name: Baixar modelo Whisper base
        run: |
          python -c "import whisper; whisper.load_model('base')"

      - name: Gerar executável com PyInstaller
        run: |
          set -e
          mkdir -p release

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            WHISPER_CACHE="$LOCALAPPDATA/Cache/whisper"
            python -c "import whisper; whisper.load_model('base')"
            pyinstaller main.py --onefile --noconsole \
              --add-data=\"$WHISPER_CACHE;whisper/cache\"
          else
            WHISPER_CACHE="$HOME/.cache/whisper"
            python -c "import whisper; whisper.load_model('base')"
            pyinstaller main.py --onefile --noconsole \
              --add-data=\"$WHISPER_CACHE:whisper/cache\"
          fi

            - name: Renomear executável
              run: |
                if [[ "${{ runner.os }}" == "Windows" ]]; then
                  mv dist/main.exe release/transcriber-windows.exe
                elif [[ "${{ runner.os }}" == "macOS" ]]; then
                  mv dist/main release/transcriber-macos
                else
                  mv dist/main release/transcriber-linux
                fi

      - name: Empacotar ZIP
        run: |
          OS_LOWER=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          mkdir -p artifacts/transcriber-$OS_LOWER

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell.exe -Command "Compress-Archive -Path release\\* -DestinationPath artifacts\\transcriber-$OS_LOWER\\transcriber-$OS_LOWER.zip"
          else
            cd release
            zip -r ../artifacts/transcriber-$OS_LOWER/transcriber-$OS_LOWER.zip ./*
            cd ..
          fi

      - name: Definir OS em minúsculas
        run: echo "OS_LOWER=$(echo '${{ runner.os }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Upload como artefato
        uses: actions/upload-artifact@v4
        with:
          name: transcriber-${{ env.OS_LOWER }}
          path: artifacts/transcriber-${{ env.OS_LOWER }}/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Baixar artefatos
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true 

      - name: Verificar conteúdo dos artifacts (debug)
        run: |
          echo "=== Conteúdo de 'artifacts' ==="
          find artifacts -type f

      - name: Criar release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/**/*.zip
